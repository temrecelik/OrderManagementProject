// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(OrderManagementDbContext))]
    [Migration("20240719095537_ahmed-1")]
    partial class ahmed1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8d6dad3-c8fc-443e-a02b-24ae0b9df15c"),
                            CreatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 288, DateTimeKind.Utc).AddTicks(8780),
                            Description = "Default Description",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 288, DateTimeKind.Utc).AddTicks(8781),
                            Name = "Default Company"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3419f0b4-29ed-4603-a6af-80838c5cacdd"),
                            CompanyId = new Guid("d8d6dad3-c8fc-443e-a02b-24ae0b9df15c"),
                            CreatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 288, DateTimeKind.Utc).AddTicks(9210),
                            LastUpdatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 288, DateTimeKind.Utc).AddTicks(9210),
                            Name = "Default Company",
                            OrderStatus = 0,
                            ProductCount = 100,
                            TotalPrice = 1000m,
                            UnitPrice = 10m,
                            UserId = new Guid("a6cec149-f87b-43e0-b4e8-43fa24e05c58")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StockCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b520d963-aad4-4df9-b0ec-e89f5c82d52d"),
                            CompanyId = new Guid("d8d6dad3-c8fc-443e-a02b-24ae0b9df15c"),
                            CreatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 290, DateTimeKind.Utc).AddTicks(2434),
                            Description = "Default Description",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 290, DateTimeKind.Utc).AddTicks(2434),
                            Name = "Default Name",
                            Price = 100m,
                            ProductCategoryId = new Guid("a248dbf5-34d2-402c-b5d4-b882911d8768"),
                            StockCount = 100
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a248dbf5-34d2-402c-b5d4-b882911d8768"),
                            CreatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 290, DateTimeKind.Utc).AddTicks(2028),
                            Description = "Default Description",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 290, DateTimeKind.Utc).AddTicks(2029),
                            Name = "Default Company"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6cec149-f87b-43e0-b4e8-43fa24e05c58"),
                            CreatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 290, DateTimeKind.Utc).AddTicks(3490),
                            Description = "Default Description",
                            Email = "Default@gmail.com",
                            LastUpdatedDate = new DateTime(2024, 7, 19, 9, 55, 37, 290, DateTimeKind.Utc).AddTicks(3490),
                            Name = "Default Name",
                            PasswordHash = new byte[] { 150, 64, 215, 160, 0, 146, 156, 179, 214, 212, 16, 29, 128, 117, 73, 193, 183, 69, 33, 208, 150, 119, 171, 203, 114, 207, 162, 1, 70, 56, 37, 253, 12, 20, 38, 32, 219, 224, 198, 24, 72, 123, 33, 112, 99, 37, 205, 37, 51, 185, 112, 79, 224, 137, 205, 114, 25, 22, 218, 161, 129, 157, 94, 128 },
                            PasswordSalt = new byte[] { 75, 243, 92, 60, 207, 118, 105, 137, 119, 57, 98, 44, 233, 204, 47, 132, 153, 142, 137, 150, 162, 11, 170, 205, 189, 173, 137, 173, 113, 140, 245, 103, 83, 45, 188, 63, 208, 190, 183, 169, 218, 225, 195, 253, 17, 55, 227, 85, 66, 43, 182, 192, 139, 249, 104, 248, 157, 70, 94, 208, 197, 173, 43, 147, 71, 155, 166, 246, 213, 42, 209, 79, 80, 169, 248, 46, 181, 69, 130, 43, 238, 253, 43, 214, 35, 244, 14, 132, 15, 28, 141, 223, 70, 163, 168, 255, 6, 155, 200, 243, 3, 168, 182, 108, 17, 209, 179, 159, 158, 230, 209, 41, 254, 1, 50, 218, 3, 174, 131, 0, 116, 55, 221, 144, 33, 167, 26, 180 }
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("b520d963-aad4-4df9-b0ec-e89f5c82d52d"),
                            OrderId = new Guid("3419f0b4-29ed-4603-a6af-80838c5cacdd")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
